<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Football Match</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        body {
            font-family: 'Poppins', sans-serif;
            background: url("/images/stadium.jpg") no-repeat center center fixed;
            background-size: cover;
            color: white;
            text-align: center;
            margin: 0;
            padding: 0;
        }
        h2 {
            text-shadow: 2px 2px 5px rgba(0, 255, 255, 0.8);
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(100px);
            padding: 20px;
            border-radius: 15px;
            width: 60%;
            margin: auto;
            box-shadow: 0px 0px 15px rgba(0, 255, 255, 0.6);
        }
        .scoreboard {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
        }
        .team {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(100px);
            padding: 20px;
            border-radius: 15px;
            width: 40%;
            box-shadow: 0px 0px 10px rgba(254, 255, 255, 0.5);
            transition: 0.3s ease;
        }
        .team:hover {
            transform: scale(1.05);
            box-shadow: 0px 0px 20px rgba(0, 255, 255, 0.8);
        }
        input {
            width: 50px;
            text-align: center;
            padding: 8px;
            border-radius: 5px;
            border: none;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            outline: none;
            transition: 0.3s ease;
        }
        .update-btn {
            background: linear-gradient(45deg, #00ff99, #0066ff);
            color: white;
            padding: 12px 20px;
            border: none;
            cursor: pointer;
            border-radius: 8px;
            font-size: 16px;
            transition: 0.3s ease;
            margin-top: 10px;
            box-shadow: 0px 0px 10px rgba(0, 255, 255, 0.5);
        }
        .update-btn:hover {
            transform: scale(1.1);
            box-shadow: 0px 0px 20px rgba(0, 255, 255, 0.8);
        }
        label {
            font-weight: bold;
            color: #e4ebe8;
            text-shadow: 1px 1px 5px rgba(0, 255, 255, 0.8);
        }
    </style>
</head>
<body>

    <h2>‚öΩ Update Match Details ‚öΩ</h2>
    <div class="container">
        <label>Team 1 Name:</label>
        <input type="text" id="team1-input" placeholder="Enter Team 1">
        <label>Team 2 Name:</label>
        <input type="text" id="team2-input" placeholder="Enter Team 2">
        <button class="update-btn" onclick="updateTeams()">Update Teams</button>
    </div>
    
    <h2>üèÜ Match üèÜ</h2>
    <h2>‚è≥ Match Time ‚è≥: <span id="matchTime">0</span> mins</h2>
    <button class="update-btn" onclick="startMatch()">Start Match</button>
    <button class="update-btn" onclick="endMatch()" style="background-color: red;">End Match</button>
    <h2 id="winnerMessage" style="color: yellow; font-size: 28px; margin-top: 20px; text-shadow: 2px 2px 5px black;"></h2>

    <div class="scoreboard">
        <div class="team">
            <h3 id="team1Display">Team 1</h3>
            <label>Goals:</label> <input type="number" id="score1-input" value="0">
            <label>Touchdowns:</label> <input type="number" id="touchdowns1-input" value="0">
            <label>Safeties:</label> <input type="number" id="safeties1-input" value="0">
            <label>Fouls:</label> <input type="number" id="fouls1-input" value="0">
            <h3>Points: <span id="points1">0</span></h3>
        </div>
        <div class="team">
            <h3 id="team2Display">Team 2</h3>
            <label>Goals:</label> <input type="number" id="score2-input" value="0">
            <label>Touchdowns:</label> <input type="number" id="touchdowns2-input" value="0">
            <label>Safeties:</label> <input type="number" id="safeties2-input" value="0">
            <label>Fouls:</label> <input type="number" id="fouls2-input" value="0">
            <h3>Points: <span id="points2">0</span></h3>
        </div>
    </div>

    <button class="update-btn" onclick="updateMatch()">Update Match</button>

    <script>
        let matchId = null; // Store match ID after creating a match
        let matchStarted = false;
        let matchTime = 0;
        let timer = null;
    
        // Function to create a new match
        async function createMatch() {
            let team1 = document.getElementById("team1-input").value;
            let team2 = document.getElementById("team2-input").value;
    
            if (!team1 || !team2) {
                alert("Please enter both team names.");
                return;
            }
    
            try {
                let response = await fetch("/match", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ team1, team2 })
                });
    
                let data = await response.json();
                if (response.ok) {
                    matchId = data.match?._id;
                    console.log("Match Created with ID:", matchId);
                    document.getElementById("team1Display").textContent = team1;
                    document.getElementById("team2Display").textContent = team2;
                    alert("Match created successfully!");
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error("Error creating match:", error);
            }
        }
    
        function startMatch() {
            if (!matchId) {
                alert("Please create a match first.");
                return;
            }
    
            if (!timer) {
                matchStarted = true;
                timer = setInterval(updateMatchTime, 5000);
                alert("‚öΩ Match Started! Let the game begin!");
            }
        }
    
        function endMatch() {
            if (timer) {
                clearInterval(timer);
                timer = null;
                matchStarted = false;
    
                updateMatch();
                setTimeout(() => {
                    showWinner();
                    alert("üèÅ Match has ended!");
                }, 500);
            }
        }
    
        function updateMatchTime() {
            if (matchTime < 90) {
                matchTime += 5;
                document.getElementById("matchTime").textContent = matchTime;
            } else {
                endMatch();
            }
        }
    
        async function updateTeams() {
            let team1 = document.getElementById("team1-input").value;
            let team2 = document.getElementById("team2-input").value;
    
            if (!team1 || !team2) {
                alert("Please enter both team names.");
                return;
            }
    
            if (!matchId) {
                console.log("Match ID is null. Creating a new match...");
                await createMatch();
            }
    
            if (!matchId) {
                alert("Failed to create match. Please try again.");
                return;
            }
    
            try {
                console.log(`Updating teams for match ID: ${matchId}`);
                let response = await fetch(`/match/update/${matchId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ team1, team2 })
                });
    
                let data = await response.json();
                if (response.ok) {
                    document.getElementById("team1Display").textContent = team1;
                    document.getElementById("team2Display").textContent = team2;
                    alert("Teams updated successfully!");
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error("Error updating teams:", error);
            }
        }
    
        async function updateMatch() {
            if (!matchStarted) {
                alert("üö® Please start the match first! üö®");
                return;
            }
    
            let goals1 = parseInt(document.getElementById("score1-input").value) || 0;
            let goals2 = parseInt(document.getElementById("score2-input").value) || 0;
            let touchdowns1 = parseInt(document.getElementById("touchdowns1-input").value) || 0;
            let touchdowns2 = parseInt(document.getElementById("touchdowns2-input").value) || 0;
            let safeties1 = parseInt(document.getElementById("safeties1-input").value) || 0;
            let safeties2 = parseInt(document.getElementById("safeties2-input").value) || 0;
            let fouls1 = parseInt(document.getElementById("fouls1-input").value) || 0;
            let fouls2 = parseInt(document.getElementById("fouls2-input").value) || 0;
    
            let totalPoints1 = (goals1 * 3) + (touchdowns1 * 6) + (safeties1 * 2) - fouls1;
            let totalPoints2 = (goals2 * 3) + (touchdowns2 * 6) + (safeties2 * 2) - fouls2;
    
            document.getElementById("points1").textContent = totalPoints1;
            document.getElementById("points2").textContent = totalPoints2;
    
            if (matchId) {
                try {
                    console.log(`Updating match ID: ${matchId}`);
                    await fetch(`/match/update/${matchId}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ goals1, goals2, touchdowns1, touchdowns2, safeties1, safeties2, fouls1, fouls2 })
                    });
                } catch (error) {
                    console.error("Error updating match:", error);
                }
            }
        }
    
        function showWinner() {
            let points1 = parseInt(document.getElementById("points1").textContent) || 0;
            let points2 = parseInt(document.getElementById("points2").textContent) || 0;
            let team1 = document.getElementById("team1Display").textContent;
            let team2 = document.getElementById("team2Display").textContent;
            let winnerMessage = document.getElementById("winnerMessage");
    
            if (points1 > points2) {
                winnerMessage.textContent = `üèÜ ${team1} Wins! üéâ`;
            } else if (points1 < points2) {
                winnerMessage.textContent = `üèÜ ${team2} Wins! üéâ`;
            } else {
                winnerMessage.textContent = `ü§ù It's a Draw!`;
            }
        }
    </script>
    
    
</body>
</html>
